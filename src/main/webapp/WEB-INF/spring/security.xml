<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd 
               http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd ">

	<!-- New in Spring Security 3.1 -->
	<!-- <http pattern="/css/**" security="none"/> -->

	<!-- <security:http use-expressions="true"> -->
	<security:http pattern="/start" security="none" />

	<security:http
			realm="Protected API"
			use-expressions="true"
			auto-config="false"
			create-session="stateless"
			entry-point-ref="unauthorizedEntryPoint"
			authentication-manager-ref="authenticationManager">
		<security:custom-filter ref="CustomUsernamePasswordAuthenticationFilter" position="FORM_LOGIN_FILTER" />
		<security:intercept-url pattern="/authenticate" access="permitAll" />
		<security:intercept-url pattern="/userauthority" access="permitAll" />
		
		<!-- <security:intercept-url pattern="/manage" access="hasRole('ROLE_ADMIN')"/> -->
		
	</security:http>

	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider
			user-service-ref="userDetailsServiceImpl">
			<security:password-encoder hash="md5">
				
			</security:password-encoder>
			<!-- <security:jdbc-user-service data-source-ref="dataSource" users-by-username-query=" 
				select username,password, enabled from et_user where username=?" authorities-by-username-query=" 
				select u.username, r.authority from et_user u, et_role r, et_r_user_role 
				u2r where u.id = u2r.user_id and r.id = u2r.role_id and u.username =? " /> -->
		</security:authentication-provider>

	</security:authentication-manager>
	<!-- <security:authentication-provider user-service-ref="userDetailsServiceImpl"> 
		<security:password-encoder hash="sha"> <security:salt-source user-property="username" 
		/> </security:password-encoder> </security:authentication-provider> -->
	<!-- <bean id="loginUrlAuthenticationEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<property name="loginFormUrl" value="/user-login-page" />
	</bean> -->
	
	
	<bean id="unauthorizedEntryPoint" class="com.extr.security.filter.UnauthorizedEntryPoint" />
	
	
	<!-- <bean id="userDetailsServiceImpl" class="com.extr.security.UserDetailsServiceImpl"> 
		<property name="userService" ref="userService"/> </bean> -->

	
	<bean id="CustomUsernamePasswordAuthenticationFilter" class="com.extr.security.filter.CustomUsernamePasswordAuthenticationFilter">
    <property name="authenticationManager" ref="authenticationManager" />

</bean>
	


<bean id="http403EntryPoint" class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint" />
	
	
</beans>